import numpy as np
from algorithms.base_algorithm import BaseMABAlgorithm

class ExploitationOnly(BaseMABAlgorithm):
    """
    Pure exploitation algorithm - always selects arm with highest estimated reward
    """
    def __init__(self, n_arms: int, **kwargs):
        super().__init__(n_arms, **kwargs)
        
    def select_arm(self) -> int:
        """
        ## IMPLEMENTED EXPLOITATION ONLY ALGORITHM ##
        
        Input: None (uses self.estimates and self.pulls)
        Output: int - arm index with highest estimated reward
        
        Strategy: Pure exploitation - always select the arm with highest estimated reward
        Note: If no arm has been pulled yet, select arm 0
        """
        # Check if any arm has been pulled yet
        if np.sum(self.pulls) == 0:
            return 0  # If no arm pulled yet, return arm 0
        else:
            return np.argmax(self.estimates)
        # Return the arm with highest estimated reward 